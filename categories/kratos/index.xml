<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kratos on 老陳网志</title>
    <link>/categories/kratos/</link>
    <description>Recent content in kratos on 老陳网志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.chenplus.com/&#34;&gt; ChenPlus.com &lt;/a&gt; &lt;a href=&#34;&#34;&gt; 渝ICP备18007511号 &lt;/a&gt;
</copyright>
    <lastBuildDate>Sun, 23 Aug 2020 11:59:45 +0800</lastBuildDate><atom:link href="/categories/kratos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>限流器系列(3)--自适应限流</title>
      <link>/posts111/2020-07-05-bbr/</link>
      <pubDate>Sun, 23 Aug 2020 11:59:45 +0800</pubDate>
      
      <guid>/posts111/2020-07-05-bbr/</guid>
      <description>漏斗桶/令牌桶确实能够保护系统不被拖垮, 但不管漏斗桶还是令牌桶, 其防护思路都是设定一个指标, 当超过该指标后就阻止或减少流量的继续进入，当系统负载降低到某一水平后则恢复流量的进入。但其通常都是被动的，其实际效果取决于限流阈值设置是否合理，但往往设置合理不是一件容易的事情. 项目日常维护中, 经常能够看到某某同学在群里说:xx系统429了, 然后经过一番查找</description>
    </item>
    
    <item>
      <title>限流器系列(2) -- Token Bucket 令牌桶</title>
      <link>/posts111/2020-06-30-token-bucket/</link>
      <pubDate>Tue, 30 Jun 2020 18:38:23 +0800</pubDate>
      
      <guid>/posts111/2020-06-30-token-bucket/</guid>
      <description>上一篇说到 Leaky Bucket 能限制客户端的访问速率, 但是无法应对突发流量, 本质原因就是漏斗桶只是为了保证固定时间内通过的流量是一样的. 面对这种情况, 本篇文章继续介绍另外一种限流器: Token Bucket &amp;ndash; 令牌桶 什么是 Token Bucket 漏斗桶的桶空间就那么大, 其只能保证桶里的请求是匀速流出, 并不关心流入的速度, 只要桶溢出了就服务拒绝, 这可能并不符合互联网行业的使用场景. 试想这样的场景, 尽管服务器</description>
    </item>
    
    <item>
      <title>限流器系列(1) -- Leaky Bucket 漏斗桶</title>
      <link>/posts111/2020-06-27-leaky-bucket/</link>
      <pubDate>Sat, 27 Jun 2020 10:14:07 +0800</pubDate>
      
      <guid>/posts111/2020-06-27-leaky-bucket/</guid>
      <description>限流器(Rate Limiter)在微服务中的重要性不言而喻了. 下游服务的稳定性, 防止过载, 全靠这个组件来保证. 限流器的实现方式, 基本有下面几种方式 计数器 漏斗通 (Leaky Bucket) 令牌桶 (Token Bucket) 基于 BBR 算法的自适应限流 基于 Nginx 的限流 分布式限流 这个系列的文章会逐一介绍各种限流器. 本篇文章会结合比较成熟组件介绍: 漏斗桶 什么是限流器 Web servers typically use a central in-memory key-value database, like Redis or Aerospike, for session management. A rate limiting algorithm is used to check</description>
    </item>
    
    <item>
      <title>Bilibili Kratos 框架源码分析(4) -- Kratos Log</title>
      <link>/posts111/2020-06-09-kratos-log/</link>
      <pubDate>Tue, 09 Jun 2020 10:14:07 +0800</pubDate>
      
      <guid>/posts111/2020-06-09-kratos-log/</guid>
      <description>用法 flag env type remark log.v LOG_V int 日志级别：DEBUG:0 INFO:1 WARN:2 ERROR:3 FATAL:4 log.stdout LOG_STDOUT bool 是否标准输出：true、false log.dir LOG_DIR string 日志文件目录，如果配置会输出日志到文件，否则不输出日志文件 log.module LOG_MODULE string 可单独配置每个文件的verbose级别：file=1,file2=2 log.filter LOG_FILTER string 过虑敏感信息 format: field1,field2. 被阉割的功能: log.agent 配置文件 [log] family = &amp;quot;xxx-service&amp;quot; dir = &amp;quot;/data/log/xxx-service/&amp;quot; stdout = true v = 3 filter = [&amp;quot;fileld1&amp;quot;, &amp;quot;field2&amp;quot;] [log.module] &amp;quot;dao_user&amp;quot; = 2 &amp;quot;servic*&amp;quot; = 1 对应的加载方法 // cmd/main.go func main() { paladin.Init() var</description>
    </item>
    
    <item>
      <title>Bilibili Kratos 框架源码分析(3) -- fanout异步</title>
      <link>/posts111/2020-05-22-kratos-fanout/</link>
      <pubDate>Fri, 22 May 2020 10:14:07 +0800</pubDate>
      
      <guid>/posts111/2020-05-22-kratos-fanout/</guid>
      <description>在写项目代码时如果遇到需要异步处理时, 如异步更新 redis, 异步比对数据等等, 我们的常规处理一般是 MQ. 但有的时候我们的操作其实很简单, 写 MQ 显得又太重了, 那么该如何在程序里实现一个异步功能? 本篇文章就介绍下 Kratos 官方 wiki 没有提到的功能 Fanout. 其实Fanout 在 生成的 kratos-demo 里面是有体现的, 只是没有使用 demo 而已 type dao struct { ... cache *fanout.Fanout ... } func newDao(r *redis.Redis, mc *memcache.Memcache, db *sql.DB) (d *dao, cf func(), err error) { ... d = &amp;amp;dao{ ... cache: fanout.New(&amp;quot;cache&amp;quot;), ... } cf = d.Close return }</description>
    </item>
    
    <item>
      <title>Bilibili Kratos 框架源码分析(2) -- Kratos 一些简单例子</title>
      <link>/posts111/2020-05-16-kratos-demo/</link>
      <pubDate>Sat, 16 May 2020 10:14:07 +0800</pubDate>
      
      <guid>/posts111/2020-05-16-kratos-demo/</guid>
      <description>本篇主要介绍四种使用 kratos 的例子. 前情透漏, 这一篇的篇幅比较长, 如果已经会用 Kratos 的可以跳过这一节 http 服务 http 服务其实就比较简单, 开篇的Golang 大法好 ！！直接就能对外提供 http 服务. http server默认有两个函数howToStart, ping. 关于ping 函数后面再具体看其作用 如何添加一个新的 api 接口? // internal/server/http/server.go func initRouter(e *bm.Engine) { e.Ping(ping) g := e.Group(&amp;quot;/kratos-demo&amp;quot;) { g.GET(&amp;quot;/start&amp;quot;, howToStart) g.GET(&amp;quot;/sayHi&amp;quot;, sayHi) g.GET(&amp;quot;/sayHello&amp;quot;, func(context *bm.Context) { svc.SayHello(context, &amp;amp;pb.HelloReq{ Name: &amp;quot;test&amp;quot;, }) context.JSON(&amp;quot;success&amp;quot;, nil) }) } v2Group := e.Group(&amp;quot;/kratos-demo/v2&amp;quot;) { v2Group.GET(&amp;quot;/sayHi&amp;quot;, sayHi) }</description>
    </item>
    
    <item>
      <title>Bilibili Kratos 框架源码分析(1) -- 启动流程</title>
      <link>/posts111/2020-05-08-kratos-flow/</link>
      <pubDate>Fri, 08 May 2020 14:42:38 +0800</pubDate>
      
      <guid>/posts111/2020-05-08-kratos-flow/</guid>
      <description>这里先吐槽一下 kratos 官方 wiki 写的实在不咋地, 一些很基本的使用方法, 一些很好的功能都没有体现出现, 同时也建议多去 github issue 里去找找答案, 那里面比 wiki 详细很多. 这个系列的文章我会基于 v0.4.2 这个版本的源码进行. 现在正式进入这个系列源码的第一篇: Kratos 启动流程 安装 kratos 至于如何安装 kratos, 请参考 官方wiki, Kratos 官方推荐方式: GO111MODULE=on &amp;amp;&amp;amp; go get -u github.com/go-kratos/kratos/tool/kratos, 不过有可能你依然无法安装成功. 特别是 bilibili/kratos 迁移到 go-kratos/kratos 之后,</description>
    </item>
    
  </channel>
</rss>
