<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每日一译 on 老陳网志</title>
    <link>/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AF%91/</link>
    <description>Recent content in 每日一译 on 老陳网志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.chenplus.com/&#34;&gt; ChenPlus.com &lt;/a&gt; &lt;a href=&#34;&#34;&gt; 渝ICP备18007511号 &lt;/a&gt;
</copyright>
    <lastBuildDate>Tue, 04 Jun 2019 11:11:54 +0800</lastBuildDate><atom:link href="/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E8%AF%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[每日一译]golang range与iteration之间的关系</title>
      <link>/posts111/2019-06-04-golang-range-address-of-iterator/</link>
      <pubDate>Tue, 04 Jun 2019 11:11:54 +0800</pubDate>
      
      <guid>/posts111/2019-06-04-golang-range-address-of-iterator/</guid>
      <description>原文地址 package main import ( &amp;quot;fmt&amp;quot; ) type T struct { id int } func main() { t1 := T{id: 1} t2 := T{id: 2} ts1 := []T{t1, t2} ts2 := []*T{} for _, t := range ts1 { ts2 = append(ts2, &amp;amp;t) } for _, t := range ts2 { fmt.Println((*t).id) } } 先不要看结果, 自己想想输出是什么? 对于很多人(包括我自己), 结果可能会让人感到惊讶 2 2 我个人期待的结果, 但是这是一个错误结果 1 2 迭代变量t使用短变量声明的方式声明, 它的声明周期就是for代码块. 这个变量在第一次循环时是第一个元素的值, 在</description>
    </item>
    
    <item>
      <title>[每日一译] Tags in Golang</title>
      <link>/posts111/2019-06-03-tags-of-golang/</link>
      <pubDate>Mon, 03 Jun 2019 22:22:15 +0800</pubDate>
      
      <guid>/posts111/2019-06-03-tags-of-golang/</guid>
      <description>原文地址: Tags in Golang 我们声明golang struct时可以在struct字段后面添加一些字符串来丰富这个字段, 这些字符串称为tag. Tags可以被当前package或者包外使用. 让我们首先看看struct是如何声明的, 然后深入研究下tag本身, 最后用几个例子结束 Struct type struct是一系列的字段的组合. 每一个字段都由一个optional名字和require</description>
    </item>
    
  </channel>
</rss>
